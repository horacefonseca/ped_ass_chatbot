"""
Comprehensive Medical Test Scenarios
Validates chatbot accuracy across medical use cases
"""

import json
from typing import Dict, List, Tuple
from datetime import datetime

class MedicalTestRunner:
    def __init__(self, chatbot_engine, nlp_pipeline, database):
        """Initialize medical test runner"""
        self.chatbot = chatbot_engine
        self.nlp = nlp_pipeline
        self.db = database
        self.test_results = {}
        
        print("🧪 Medical Test Runner initialized!")
    
    def run_comprehensive_tests(self) -> Dict:
        """Run all medical test scenarios"""
        print("🚀 Starting Comprehensive Medical Tests...")
        print("=" * 60)
        
        all_results = {}\n        \n        # Test 1: NLP Accuracy\n        print(\"\\n🧠 Test 1: Medical NLP Accuracy\")\n        nlp_results = self._test_nlp_accuracy()\n        all_results['nlp_accuracy'] = nlp_results\n        \n        # Test 2: Conversation Flow\n        print(\"\\n💬 Test 2: Conversation Flow Management\")\n        flow_results = self._test_conversation_flows()\n        all_results['conversation_flows'] = flow_results\n        \n        # Test 3: Medical Scenario Handling\n        print(\"\\n🏥 Test 3: Medical Scenario Handling\")\n        scenario_results = self._test_medical_scenarios()\n        all_results['medical_scenarios'] = scenario_results\n        \n        # Test 4: Emergency Detection\n        print(\"\\n🚨 Test 4: Emergency Detection\")\n        emergency_results = self._test_emergency_detection()\n        all_results['emergency_detection'] = emergency_results\n        \n        # Test 5: Database Operations\n        print(\"\\n🗄️ Test 5: Database Operations\")\n        db_results = self._test_database_operations()\n        all_results['database_operations'] = db_results\n        \n        # Test 6: Error Handling\n        print(\"\\n⚠️ Test 6: Error Handling & Edge Cases\")\n        error_results = self._test_error_handling()\n        all_results['error_handling'] = error_results\n        \n        # Generate final report\n        final_report = self._generate_final_report(all_results)\n        all_results['final_report'] = final_report\n        \n        return all_results\n    \n    def _test_nlp_accuracy(self) -> Dict:\n        \"\"\"Test NLP accuracy for medical queries\"\"\"\n        test_cases = [\n            # Intent Classification Tests\n            (\"I need to book an appointment with cardiology\", \"book_appointment\", [\"cardiology\"]),\n            (\"I want to schedule with a heart doctor\", \"book_appointment\", [\"cardiology\"]),\n            (\"I have chest pain and need help\", \"book_appointment\", [\"cardiology\"]),\n            (\"What are your clinic hours?\", \"get_info\", []),\n            (\"Where is your office located?\", \"get_info\", []),\n            (\"Check my appointments please\", \"check_appointment\", []),\n            (\"I want to cancel my appointment\", \"cancel_appointment\", []),\n            (\"Hello, can you help me?\", \"greeting\", []),\n            \n            # Medical Entity Extraction Tests\n            (\"I need dermatology for my skin rash\", \"book_appointment\", [\"dermatology\"]),\n            (\"My child has fever, need pediatrics\", \"book_appointment\", [\"pediatrics\"]),\n            (\"Headache getting worse, need neurology\", \"book_appointment\", [\"neurology\"]),\n            (\"Back pain issue, orthopedics appointment\", \"book_appointment\", [\"orthopedics\"]),\n            (\"Mental health consultation needed\", \"book_appointment\", [\"psychiatry\"]),\n            (\"General checkup with family doctor\", \"book_appointment\", [\"internal_medicine\"]),\n            \n            # Complex Medical Queries\n            (\"I have anxiety and depression, need therapy\", \"book_appointment\", [\"psychiatry\"]),\n            (\"Chest pain and shortness of breath urgent\", \"book_appointment\", [\"cardiology\"]),\n            (\"My baby has high fever and won't eat\", \"book_appointment\", [\"pediatrics\"]),\n            (\"Severe migraine, brain doctor needed\", \"book_appointment\", [\"neurology\"]),\n        ]\n        \n        correct_intents = 0\n        correct_entities = 0\n        total_tests = len(test_cases)\n        \n        detailed_results = []\n        \n        for query, expected_intent, expected_specialties in test_cases:\n            nlp_result = self.nlp.process_query(query)\n            \n            # Check intent accuracy\n            intent_correct = nlp_result['intent'] == expected_intent\n            if intent_correct:\n                correct_intents += 1\n            \n            # Check entity extraction\n            entities_correct = True\n            if expected_specialties:\n                entities_correct = any(\n                    specialty in nlp_result['entities']['specialties'] \n                    for specialty in expected_specialties\n                )\n            if entities_correct:\n                correct_entities += 1\n            \n            detailed_results.append({\n                'query': query,\n                'expected_intent': expected_intent,\n                'actual_intent': nlp_result['intent'],\n                'expected_specialties': expected_specialties,\n                'actual_specialties': nlp_result['entities']['specialties'],\n                'intent_correct': intent_correct,\n                'entities_correct': entities_correct,\n                'overall_correct': intent_correct and entities_correct\n            })\n            \n            status = \"✅\" if (intent_correct and entities_correct) else \"❌\"\n            print(f\"{status} '{query[:40]}...' -> Intent: {nlp_result['intent']} | Entities: {nlp_result['entities']['specialties']}\")\n        \n        intent_accuracy = (correct_intents / total_tests) * 100\n        entity_accuracy = (correct_entities / total_tests) * 100\n        overall_accuracy = (sum(1 for r in detailed_results if r['overall_correct']) / total_tests) * 100\n        \n        print(f\"\\n📊 NLP Test Results:\")\n        print(f\"• Intent Accuracy: {intent_accuracy:.1f}% ({correct_intents}/{total_tests})\")\n        print(f\"• Entity Accuracy: {entity_accuracy:.1f}% ({correct_entities}/{total_tests})\")\n        print(f\"• Overall Accuracy: {overall_accuracy:.1f}%\")\n        \n        return {\n            'intent_accuracy': intent_accuracy,\n            'entity_accuracy': entity_accuracy,\n            'overall_accuracy': overall_accuracy,\n            'total_tests': total_tests,\n            'detailed_results': detailed_results\n        }\n    \n    def _test_conversation_flows(self) -> Dict:\n        \"\"\"Test conversation flow management\"\"\"\n        test_scenarios = [\n            {\n                'name': 'Complete Booking Flow - Cardiology',\n                'conversation': [\n                    (\"Hello\", \"greeting\"),\n                    (\"I want to book an appointment\", \"specialty_selection\"),\n                    (\"Cardiology\", \"doctor_selection\"),\n                    (\"Dr. Garcia\", \"patient_info_collection\"),\n                    (\"John Smith\", \"patient_info_collection\"),\n                    (\"+1-555-123-4567\", \"time_selection\"),\n                    (\"10:00\", \"booking_confirmation\")\n                ]\n            },\n            {\n                'name': 'Information Request Flow',\n                'conversation': [\n                    (\"What are your hours?\", \"hours_info\"),\n                    (\"Where are you located?\", \"location_info\"),\n                    (\"Phone number?\", \"contact_info\")\n                ]\n            },\n            {\n                'name': 'Medical Context Detection',\n                'conversation': [\n                    (\"I have chest pain\", \"doctor_selection\"),  # Should detect cardiology\n                    (\"Dr. Garcia\", \"patient_info_collection\"),\n                    (\"Sarah Johnson\", \"patient_info_collection\"),\n                    (\"+1-555-999-8888\", \"time_selection\")\n                ]\n            }\n        ]\n        \n        flow_results = []\n        total_steps = 0\n        correct_steps = 0\n        \n        for scenario in test_scenarios:\n            print(f\"\\n📋 Testing: {scenario['name']}\")\n            print(\"-\" * 40)\n            \n            session_id = f\"test_{scenario['name'].lower().replace(' ', '_')}\"\n            scenario_correct = 0\n            scenario_total = len(scenario['conversation'])\n            \n            for step, (message, expected_type) in enumerate(scenario['conversation'], 1):\n                response = self.chatbot.process_message(message, session_id)\n                \n                is_correct = response['type'] == expected_type\n                if is_correct:\n                    correct_steps += 1\n                    scenario_correct += 1\n                \n                total_steps += 1\n                \n                status = \"✅\" if is_correct else \"❌\"\n                print(f\"{status} Step {step}: '{message}' -> {response['type']} (expected: {expected_type})\")\n            \n            scenario_accuracy = (scenario_correct / scenario_total) * 100\n            flow_results.append({\n                'name': scenario['name'],\n                'accuracy': scenario_accuracy,\n                'correct_steps': scenario_correct,\n                'total_steps': scenario_total\n            })\n            \n            print(f\"📈 Scenario Accuracy: {scenario_accuracy:.1f}%\")\n        \n        overall_flow_accuracy = (correct_steps / total_steps) * 100\n        \n        print(f\"\\n📊 Conversation Flow Results:\")\n        print(f\"• Overall Flow Accuracy: {overall_flow_accuracy:.1f}% ({correct_steps}/{total_steps})\")\n        \n        return {\n            'overall_accuracy': overall_flow_accuracy,\n            'total_steps': total_steps,\n            'correct_steps': correct_steps,\n            'scenario_results': flow_results\n        }\n    \n    def _test_medical_scenarios(self) -> Dict:\n        \"\"\"Test specific medical scenarios\"\"\"\n        medical_scenarios = [\n            {\n                'name': 'Chest Pain - Cardiology Route',\n                'input': \"I have severe chest pain and need help\",\n                'expected_specialty': 'cardiology',\n                'expected_urgency': True\n            },\n            {\n                'name': 'Child Fever - Pediatrics Route',\n                'input': \"My 3-year-old has high fever\",\n                'expected_specialty': 'pediatrics',\n                'expected_urgency': False\n            },\n            {\n                'name': 'Skin Rash - Dermatology Route',\n                'input': \"I have a spreading rash on my arms\",\n                'expected_specialty': 'dermatology',\n                'expected_urgency': False\n            },\n            {\n                'name': 'Mental Health - Psychiatry Route',\n                'input': \"I'm dealing with anxiety and depression\",\n                'expected_specialty': 'psychiatry',\n                'expected_urgency': False\n            },\n            {\n                'name': 'Back Pain - Orthopedics Route',\n                'input': \"Chronic lower back pain getting worse\",\n                'expected_specialty': 'orthopedics',\n                'expected_urgency': False\n            }\n        ]\n        \n        scenario_results = []\n        correct_routing = 0\n        \n        for scenario in medical_scenarios:\n            nlp_result = self.nlp.process_query(scenario['input'])\n            response = self.chatbot.process_message(scenario['input'], f\"medical_test_{len(scenario_results)}\")\n            \n            # Check specialty routing\n            specialty_correct = scenario['expected_specialty'] in nlp_result['entities']['specialties']\n            \n            # Check urgency detection\n            urgency_detected = len(nlp_result['entities']['urgency']) > 0\n            urgency_correct = urgency_detected == scenario['expected_urgency']\n            \n            overall_correct = specialty_correct and urgency_correct\n            if overall_correct:\n                correct_routing += 1\n            \n            scenario_results.append({\n                'name': scenario['name'],\n                'input': scenario['input'],\n                'specialty_correct': specialty_correct,\n                'urgency_correct': urgency_correct,\n                'overall_correct': overall_correct,\n                'detected_specialties': nlp_result['entities']['specialties'],\n                'detected_urgency': nlp_result['entities']['urgency']\n            })\n            \n            status = \"✅\" if overall_correct else \"❌\"\n            print(f\"{status} {scenario['name']}: Specialty={specialty_correct}, Urgency={urgency_correct}\")\n        \n        routing_accuracy = (correct_routing / len(medical_scenarios)) * 100\n        \n        print(f\"\\n📊 Medical Scenario Results:\")\n        print(f\"• Medical Routing Accuracy: {routing_accuracy:.1f}% ({correct_routing}/{len(medical_scenarios)})\")\n        \n        return {\n            'routing_accuracy': routing_accuracy,\n            'total_scenarios': len(medical_scenarios),\n            'correct_routing': correct_routing,\n            'scenario_details': scenario_results\n        }\n    \n    def _test_emergency_detection(self) -> Dict:\n        \"\"\"Test emergency detection capabilities\"\"\"\n        emergency_cases = [\n            (\"I'm having a heart attack!\", True),\n            (\"My chest pain is severe, emergency!\", True),\n            (\"I can't breathe properly\", True),\n            (\"Severe bleeding won't stop\", True),\n            (\"I think I'm having a stroke\", True),\n            (\"My baby isn't breathing\", True),\n            (\"Suicidal thoughts, need help\", True),\n            \n            # Non-emergency cases\n            (\"I have a mild headache\", False),\n            (\"Need a routine checkup\", False),\n            (\"Skin rash appeared yesterday\", False),\n            (\"Back pain for a few days\", False),\n            (\"Want to schedule vaccination\", False)\n        ]\n        \n        correct_detections = 0\n        emergency_results = []\n        \n        for case, is_emergency in emergency_cases:\n            response = self.chatbot.process_message(case, f\"emergency_test_{len(emergency_results)}\")\n            \n            # Check if emergency was detected\n            emergency_detected = response['type'] == 'emergency_response'\n            \n            is_correct = emergency_detected == is_emergency\n            if is_correct:\n                correct_detections += 1\n            \n            emergency_results.append({\n                'input': case,\n                'expected_emergency': is_emergency,\n                'detected_emergency': emergency_detected,\n                'correct': is_correct,\n                'response_type': response['type']\n            })\n            \n            status = \"✅\" if is_correct else \"❌\"\n            emergency_status = \"🚨\" if emergency_detected else \"😌\"\n            print(f\"{status} {emergency_status} '{case}' -> Emergency: {emergency_detected}\")\n        \n        emergency_accuracy = (correct_detections / len(emergency_cases)) * 100\n        \n        print(f\"\\n📊 Emergency Detection Results:\")\n        print(f\"• Emergency Detection Accuracy: {emergency_accuracy:.1f}% ({correct_detections}/{len(emergency_cases)})\")\n        \n        return {\n            'accuracy': emergency_accuracy,\n            'total_cases': len(emergency_cases),\n            'correct_detections': correct_detections,\n            'detailed_results': emergency_results\n        }\n    \n    def _test_database_operations(self) -> Dict:\n        \"\"\"Test database operations\"\"\"\n        db_test_results = {\n            'connection_test': False,\n            'doctor_retrieval': False,\n            'appointment_booking': False,\n            'appointment_retrieval': False,\n            'data_persistence': False\n        }\n        \n        try:\n            # Test 1: Database Connection\n            self.db.cursor.execute(\"SELECT COUNT(*) FROM doctors\")\n            doctor_count = self.db.cursor.fetchone()[0]\n            if doctor_count > 0:\n                db_test_results['connection_test'] = True\n                print(\"✅ Database connection successful\")\n            \n            # Test 2: Doctor Retrieval\n            doctors = self.db.get_available_doctors('cardiology')\n            if doctors:\n                db_test_results['doctor_retrieval'] = True\n                print(\"✅ Doctor retrieval working\")\n            \n            # Test 3: Appointment Booking\n            test_appointment = {\n                'name': 'Test Patient DB',\n                'phone': '+1-test-db-123',\n                'doctor': 'Dr. Garcia',\n                'specialty': 'cardiology',\n                'date': '2024-02-20',\n                'time': '10:00',\n                'symptoms': 'test symptoms'\n            }\n            \n            booking_result = self.db.book_appointment(test_appointment)\n            if booking_result['success']:\n                db_test_results['appointment_booking'] = True\n                test_appointment_id = booking_result['appointment_id']\n                print(\"✅ Appointment booking successful\")\n                \n                # Test 4: Appointment Retrieval\n                appointments = self.db.get_patient_appointments('Test Patient DB', '+1-test-db-123')\n                if appointments:\n                    db_test_results['appointment_retrieval'] = True\n                    print(\"✅ Appointment retrieval working\")\n                    \n                    # Test 5: Data Persistence\n                    if appointments[0]['doctor_name'] == 'Dr. Garcia':\n                        db_test_results['data_persistence'] = True\n                        print(\"✅ Data persistence verified\")\n        \n        except Exception as e:\n            print(f\"❌ Database error: {e}\")\n        \n        success_count = sum(db_test_results.values())\n        db_accuracy = (success_count / len(db_test_results)) * 100\n        \n        print(f\"\\n📊 Database Test Results:\")\n        print(f\"• Database Operations: {db_accuracy:.1f}% ({success_count}/{len(db_test_results)})\")\n        \n        return {\n            'accuracy': db_accuracy,\n            'successful_operations': success_count,\n            'total_operations': len(db_test_results),\n            'detailed_results': db_test_results\n        }\n    \n    def _test_error_handling(self) -> Dict:\n        \"\"\"Test error handling and edge cases\"\"\"\n        error_cases = [\n            (\"\", \"empty_input\"),\n            (\"asdfghjkl qwerty\", \"gibberish\"),\n            (\"Book appointment with aliens\", \"invalid_specialty\"),\n            (\"I want to see Dr. NonExistent\", \"invalid_doctor\"),\n            (\"🤖🚀💫\", \"emojis_only\"),\n            (\"a\" * 1000, \"extremely_long_input\"),\n            (\"Book appointment \" * 50, \"repetitive_input\")\n        ]\n        \n        handled_errors = 0\n        error_results = []\n        \n        for error_input, error_type in error_cases:\n            try:\n                response = self.chatbot.process_message(error_input, f\"error_test_{len(error_results)}\")\n                \n                # Check if response was provided\n                response_provided = 'response' in response and response['response']\n                \n                # Check if it's a graceful fallback\n                graceful_fallback = response.get('type') in ['fallback', 'specialty_clarification', 'error']\n                \n                if response_provided and graceful_fallback:\n                    handled_errors += 1\n                    status = \"✅\"\n                else:\n                    status = \"❌\"\n                \n                error_results.append({\n                    'input': error_input[:50] + \"...\" if len(error_input) > 50 else error_input,\n                    'error_type': error_type,\n                    'response_provided': response_provided,\n                    'graceful_fallback': graceful_fallback,\n                    'handled_correctly': response_provided and graceful_fallback\n                })\n                \n                print(f\"{status} {error_type}: Response provided and handled gracefully\")\n                \n            except Exception as e:\n                error_results.append({\n                    'input': error_input[:50] + \"...\" if len(error_input) > 50 else error_input,\n                    'error_type': error_type,\n                    'exception': str(e),\n                    'handled_correctly': False\n                })\n                print(f\"❌ {error_type}: Exception occurred - {e}\")\n        \n        error_handling_rate = (handled_errors / len(error_cases)) * 100\n        \n        print(f\"\\n📊 Error Handling Results:\")\n        print(f\"• Error Handling Rate: {error_handling_rate:.1f}% ({handled_errors}/{len(error_cases)})\")\n        \n        return {\n            'handling_rate': error_handling_rate,\n            'handled_errors': handled_errors,\n            'total_error_cases': len(error_cases),\n            'detailed_results': error_results\n        }\n    \n    def _generate_final_report(self, all_results: Dict) -> Dict:\n        \"\"\"Generate comprehensive final test report\"\"\"\n        print(\"\\n\" + \"=\" * 60)\n        print(\"🎯 COMPREHENSIVE TEST REPORT\")\n        print(\"=\" * 60)\n        \n        # Calculate overall scores\n        scores = {\n            'NLP Accuracy': all_results['nlp_accuracy']['overall_accuracy'],\n            'Conversation Flows': all_results['conversation_flows']['overall_accuracy'],\n            'Medical Scenarios': all_results['medical_scenarios']['routing_accuracy'],\n            'Emergency Detection': all_results['emergency_detection']['accuracy'],\n            'Database Operations': all_results['database_operations']['accuracy'],\n            'Error Handling': all_results['error_handling']['handling_rate']\n        }\n        \n        overall_score = sum(scores.values()) / len(scores)\n        \n        print(f\"\\n📊 INDIVIDUAL COMPONENT SCORES:\")\n        for component, score in scores.items():\n            print(f\"• {component:<20}: {score:>6.1f}%\")\n        \n        print(f\"\\n🎯 OVERALL SYSTEM SCORE: {overall_score:.1f}%\")\n        \n        # Performance Assessment\n        if overall_score >= 85:\n            grade = \"EXCELLENT 🌟\"\n            assessment = \"System exceeds production requirements!\"\n        elif overall_score >= 75:\n            grade = \"VERY GOOD 👍\"\n            assessment = \"System meets production standards with minor optimizations needed\"\n        elif overall_score >= 60:\n            grade = \"GOOD ✅\"\n            assessment = \"System functional, some improvements recommended\"\n        else:\n            grade = \"NEEDS IMPROVEMENT ⚠️\"\n            assessment = \"System requires significant enhancements\"\n        \n        print(f\"\\n🏆 GRADE: {grade}\")\n        print(f\"💡 ASSESSMENT: {assessment}\")\n        \n        # Detailed Statistics\n        print(f\"\\n📈 DETAILED STATISTICS:\")\n        print(f\"• Total NLP Tests: {all_results['nlp_accuracy']['total_tests']}\")\n        print(f\"• Total Conversation Steps: {all_results['conversation_flows']['total_steps']}\")\n        print(f\"• Medical Scenarios Tested: {all_results['medical_scenarios']['total_scenarios']}\")\n        print(f\"• Emergency Cases Tested: {all_results['emergency_detection']['total_cases']}\")\n        print(f\"• Database Operations: {all_results['database_operations']['total_operations']}\")\n        print(f\"• Error Cases Handled: {all_results['error_handling']['handled_errors']}/{all_results['error_handling']['total_error_cases']}\")\n        \n        # Recommendations\n        recommendations = []\n        if scores['NLP Accuracy'] < 80:\n            recommendations.append(\"Enhance NLP training data with more medical variations\")\n        if scores['Emergency Detection'] < 90:\n            recommendations.append(\"Expand emergency keyword detection patterns\")\n        if scores['Error Handling'] < 85:\n            recommendations.append(\"Improve graceful error handling for edge cases\")\n        \n        if recommendations:\n            print(f\"\\n🔧 RECOMMENDATIONS:\")\n            for i, rec in enumerate(recommendations, 1):\n                print(f\"{i}. {rec}\")\n        \n        return {\n            'overall_score': overall_score,\n            'component_scores': scores,\n            'grade': grade,\n            'assessment': assessment,\n            'recommendations': recommendations,\n            'test_timestamp': datetime.now().isoformat(),\n            'total_tests_run': sum([\n                all_results['nlp_accuracy']['total_tests'],\n                all_results['conversation_flows']['total_steps'],\n                all_results['medical_scenarios']['total_scenarios'],\n                all_results['emergency_detection']['total_cases'],\n                all_results['database_operations']['total_operations'],\n                all_results['error_handling']['total_error_cases']\n            ])\n        }\n\nif __name__ == \"__main__\":\n    print(\"🧪 Medical Test Scenarios - Comprehensive Validation Suite\")\n    print(\"Features: NLP testing, conversation flows, medical scenarios, emergency detection\")